#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express = require('express');
var app = require('../app');
var debug = require('debug')('assignment-dynamic-url-shortener:server');
var http = require('http');

const redisWrapper = require('../lib/redis_wrapper');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
const genId = require('shortid').generate;
app.use(
	'/socket.io',
	express.static(__dirname + 'node_modules/socket.io-client/dist/')
);

io.on('connection', client => {
	client.on('increment', _handleIncrement);
	client.on('create', _handleCreation);
	client.on('delete', _handleDeletion);
});

function _handleIncrement(urlObj) {
	redisWrapper.getUrlCount(urlObj.long).then(count => {
		urlObj.count = count;
		io.emit(`new_count`, urlObj);
	});
}

function _handleCreation(data) {
	let uniqId = genId();
	let p = redisWrapper.saveLink({
		short: uniqId,
		long: data
	});

	if (p) {
		p.then(result => {
			if (!!result) {
				console.log('Saved successfully');
				io.emit(`new_create`, {
					short: uniqId,
					long: data,
					count: 0
				});
			} else {
				console.err('WAAAAAAAH');
			}
		});
	} else {
		console.err('OH NO AN ERROR!');
	}
}

function _handleDeletion(urlObj) {
	redisWrapper.deleteLink(urlObj).then(() => {
		io.emit('new_delete', urlObj.short);
	});
}

/**
 * Listen on prosole.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
ided port, on all net
 work interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);

	// Check if initial key for hash exists.
	//redisWrapper.init().then(console.log);
}
